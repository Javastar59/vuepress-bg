(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{217:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),s("p",[s("code",[t._v("<源路径>")]),t._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),s("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("filepath.Match")]),s("OutboundLink")],1),t._v(" 规则，如：")]),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),s("p",[t._v("在实际执行中，会将其变更为：")]),t._v(" "),t._m(27),s("p",[t._v("对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),s("p",[t._v("格式有两种：")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),s("p",[t._v("格式为：")]),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._m(77),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),s("p",[t._v("构建好了后，我们启动一个容器：")]),t._v(" "),t._m(92),t._m(93),t._v(" "),t._m(94),t._m(95),t._v(" "),t._m(96),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._m(100),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfie 官方文档"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile 最佳实践文档"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/docker-library/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 官方镜像 Dockerfile"),s("OutboundLink")],1)])])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.star59.top/bg/20190311/v0NXKLNc4wOF.jpg",alt:"docker"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dockerfile常用命令-copy-复制文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile常用命令-copy-复制文件","aria-hidden":"true"}},[this._v("#")]),this._v(" Dockerfile常用命令  COPY 复制文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("COPY <源路径>... <目标路径>")])]),this._v(" "),e("li",[e("code",[this._v('COPY ["<源路径1>",... "<目标路径>"]')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("和 "),e("code",[this._v("RUN")]),this._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("COPY")]),this._v(" 指令将从构建上下文目录中 "),e("code",[this._v("<源路径>")]),this._v(" 的文件/目录复制到新的一层的镜像内的 "),e("code",[this._v("<目标路径>")]),this._v(" 位置。比如：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("COPY package.json /usr/src/app/\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("<目标路径>")]),this._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),e("code",[this._v("WORKDIR")]),this._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("此外，还需要注意一点，使用 "),e("code",[this._v("COPY")]),this._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"add-更高级的复制文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-更高级的复制文件","aria-hidden":"true"}},[this._v("#")]),this._v(" ADD 更高级的复制文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("ADD")]),this._v(" 指令和 "),e("code",[this._v("COPY")]),this._v(" 的格式和性质基本一致。但是在 "),e("code",[this._v("COPY")]),this._v(" 基础上增加了一些功能。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("比如 "),s("code",[t._v("<源路径>")]),t._v(" 可以是一个 "),s("code",[t._v("URL")]),t._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),s("code",[t._v("<目标路径>")]),t._v(" 去。下载后的文件权限自动设置为 "),s("code",[t._v("600")]),t._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),s("code",[t._v("RUN")]),t._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),s("code",[t._v("RUN")]),t._v(" 指令进行解压缩。所以不如直接使用 "),s("code",[t._v("RUN")]),t._v(" 指令，然后使用 "),s("code",[t._v("wget")]),t._v(" 或者 "),s("code",[t._v("curl")]),t._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("如果 "),s("code",[t._v("<源路径>")]),t._v(" 为一个 "),s("code",[t._v("tar")]),t._v(" 压缩文件的话，压缩格式为 "),s("code",[t._v("gzip")]),t._v(", "),s("code",[t._v("bzip2")]),t._v(" 以及 "),s("code",[t._v("xz")]),t._v(" 的情况下，"),s("code",[t._v("ADD")]),t._v(" 指令将会自动解压缩这个压缩文件到 "),s("code",[t._v("<目标路径>")]),t._v(" 去。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "),e("code",[this._v("ubuntu")]),this._v(" 中：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("FROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("..")]),this._v(".\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "),e("code",[this._v("ADD")]),this._v(" 命令了。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在 Docker 官方的 "),s("code",[t._v("Dockerfile 最佳实践文档")]),t._v(" 中要求，尽可能的使用 "),s("code",[t._v("COPY")]),t._v("，因为 "),s("code",[t._v("COPY")]),t._v(" 的语义很明确，就是复制文件而已，而 "),s("code",[t._v("ADD")]),t._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),s("code",[t._v("ADD")]),t._v(" 的场合，就是所提及的需要自动解压缩的场合。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("另外需要注意的是，"),e("code",[this._v("ADD")]),this._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("因此在 "),s("code",[t._v("COPY")]),t._v(" 和 "),s("code",[t._v("ADD")]),t._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),s("code",[t._v("COPY")]),t._v(" 指令，仅在需要自动解压缩的场合使用 "),s("code",[t._v("ADD")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cmd-容器启动命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd-容器启动命令","aria-hidden":"true"}},[this._v("#")]),this._v(" CMD 容器启动命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("CMD")]),this._v(" 指令的格式和 "),e("code",[this._v("RUN")]),this._v(" 相似，也是两种格式：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("shell")]),t._v(" 格式："),s("code",[t._v("CMD <命令>")])]),t._v(" "),s("li",[s("code",[t._v("exec")]),t._v(" 格式："),s("code",[t._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),t._v(" "),s("li",[t._v("参数列表格式："),s("code",[t._v('CMD ["参数1", "参数2"...]')]),t._v("。在指定了 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 指令后，用 "),s("code",[t._v("CMD")]),t._v(" 指定具体的参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"),e("code",[this._v("CMD")]),this._v(" 指令就是用于指定默认的容器主进程的启动命令的。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),s("code",[t._v("ubuntu")]),t._v(" 镜像默认的 "),s("code",[t._v("CMD")]),t._v(" 是 "),s("code",[t._v("/bin/bash")]),t._v("，如果我们直接 "),s("code",[t._v("docker run -it ubuntu")]),t._v(" 的话，会直接进入 "),s("code",[t._v("bash")]),t._v("。我们也可以在运行时指定运行别的命令，如 "),s("code",[t._v("docker run -it ubuntu cat /etc/os-release")]),t._v("。这就是用 "),s("code",[t._v("cat /etc/os-release")]),t._v(" 命令替换了默认的 "),s("code",[t._v("/bin/bash")]),t._v(" 命令了，输出了系统版本信息。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在指令格式上，一般推荐使用 "),e("code",[this._v("exec")]),this._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),e("code",[this._v('"')]),this._v("，而不要使用单引号。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果使用 "),e("code",[this._v("shell")]),this._v(" 格式的话，实际的命令会被包装为 "),e("code",[this._v("sh -c")]),this._v(" 的参数的形式进行执行。比如：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("CMD "),e("span",{pre:!0,attrs:{class:"token keyword"}},[this._v("echo")]),this._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[this._v("$HOME")]),this._v("\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("CMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HOME")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("而使用 "),s("code",[t._v("service nginx start")]),t._v(" 命令，则是希望 upstart 来以后台守护进程形式启动 "),s("code",[t._v("nginx")]),t._v(" 服务。而刚才说了 "),s("code",[t._v("CMD service nginx start")]),t._v(" 会被理解为 "),s("code",[t._v('CMD [ "sh", "-c", "service nginx start"]')]),t._v("，因此主进程实际上是 "),s("code",[t._v("sh")]),t._v("。那么当 "),s("code",[t._v("service nginx start")]),t._v(" 命令结束后，"),s("code",[t._v("sh")]),t._v(" 也就结束了，"),s("code",[t._v("sh")]),t._v(" 作为主进程退出了，自然就会令容器退出。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("正确的做法是直接执行 "),e("code",[this._v("nginx")]),this._v(" 可执行文件，并且要求以前台形式运行。比如：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("CMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"daemon off;"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"entrypoint-入口点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-入口点","aria-hidden":"true"}},[this._v("#")]),this._v(" ENTRYPOINT 入口点")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("ENTRYPOINT")]),t._v(" 的格式和 "),s("code",[t._v("RUN")]),t._v(" 指令格式一样，分为 "),s("code",[t._v("exec")]),t._v(" 格式和 "),s("code",[t._v("shell")]),t._v(" 格式。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("ENTRYPOINT")]),t._v(" 的目的和 "),s("code",[t._v("CMD")]),t._v(" 一样，都是在指定容器启动程序及参数。"),s("code",[t._v("ENTRYPOINT")]),t._v(" 在运行时也可以替代，不过比 "),s("code",[t._v("CMD")]),t._v(" 要略显繁琐，需要通过 "),s("code",[t._v("docker run")]),t._v(" 的参数 "),s("code",[t._v("--entrypoint")]),t._v(" 来指定。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("当指定了 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 后，"),s("code",[t._v("CMD")]),t._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),s("code",[t._v("CMD")]),t._v(" 的内容作为参数传给 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 指令，换句话说实际执行时，将变为：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ENTRYPOINT"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<CMD>"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"env-设置环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env-设置环境变量","aria-hidden":"true"}},[this._v("#")]),this._v(" ENV 设置环境变量")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("ENV <key> <value>")])]),this._v(" "),e("li",[e("code",[this._v("ENV <key1>=<value1> <key2>=<value2>...")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "),e("code",[this._v("RUN")]),this._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("ENV VERSION"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1.0 DEBUG"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("on \\\n    NAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Happy Feet"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "),e("code",[this._v("node")]),this._v(" 镜像 "),e("code",[this._v("Dockerfile")]),this._v(" 中，就有类似这样的代码：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("ENV NODE_VERSION 7.2.0\n\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://nodejs.org/dist/v'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v("/node-v"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v('-linux-x64.tar.xz"')]),t._v(" \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://nodejs.org/dist/v'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v('/SHASUMS256.txt.asc"')]),t._v(" \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" node-v'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v('-linux-x64.tar.xz\\$"')]),t._v(" SHASUMS256.txt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sha256sum -c - \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xJf "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-v'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v('-linux-x64.tar.xz"')]),t._v(" -C /usr/local --strip-components"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1 \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-v'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE_VERSION")]),t._v('-linux-x64.tar.xz"')]),t._v(" SHASUMS256.txt.asc SHASUMS256.txt \\\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /usr/local/bin/node /usr/local/bin/nodejs\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在这里先定义了环境变量 "),s("code",[t._v("NODE_VERSION")]),t._v("，其后的 "),s("code",[t._v("RUN")]),t._v(" 这层里，多次使用 "),s("code",[t._v("$NODE_VERSION")]),t._v(" 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "),s("code",[t._v("7.2.0")]),t._v(" 即可，"),s("code",[t._v("Dockerfile")]),t._v(" 构建维护变得更轻松了。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("下列指令可以支持环境变量展开： "),s("code",[t._v("ADD")]),t._v("、"),s("code",[t._v("COPY")]),t._v("、"),s("code",[t._v("ENV")]),t._v("、"),s("code",[t._v("EXPOSE")]),t._v("、"),s("code",[t._v("LABEL")]),t._v("、"),s("code",[t._v("USER")]),t._v("、"),s("code",[t._v("WORKDIR")]),t._v("、"),s("code",[t._v("VOLUME")]),t._v("、"),s("code",[t._v("STOPSIGNAL")]),t._v("、"),s("code",[t._v("ONBUILD")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "),e("code",[this._v("Dockerfile")]),this._v(" 制作更多的镜像，只需使用不同的环境变量即可。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"arg-构建参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arg-构建参数","aria-hidden":"true"}},[this._v("#")]),this._v(" ARG 构建参数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("格式："),e("code",[this._v("ARG <参数名>[=<默认值>]")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("构建参数和 "),s("code",[t._v("ENV")]),t._v(" 的效果一样，都是设置环境变量。所不同的是，"),s("code",[t._v("ARG")]),t._v(" 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 "),s("code",[t._v("ARG")]),t._v(" 保存密码之类的信息，因为 "),s("code",[t._v("docker history")]),t._v(" 还是可以看到所有值的。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("Dockerfile")]),t._v(" 中的 "),s("code",[t._v("ARG")]),t._v(" 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 "),s("code",[t._v("docker build")]),t._v(" 中用 "),s("code",[t._v("--build-arg <参数名>=<值>")]),t._v(" 来覆盖。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在 1.13 之前的版本，要求 "),s("code",[t._v("--build-arg")]),t._v(" 中的参数名，必须在 "),s("code",[t._v("Dockerfile")]),t._v(" 中用 "),s("code",[t._v("ARG")]),t._v(" 定义过了，换句话说，就是 "),s("code",[t._v("--build-arg")]),t._v(" 指定的参数，必须在 "),s("code",[t._v("Dockerfile")]),t._v(" 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 "),s("code",[t._v("Dockerfile")]),t._v(" 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"volume-定义匿名卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume-定义匿名卷","aria-hidden":"true"}},[this._v("#")]),this._v(" VOLUME 定义匿名卷")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v('VOLUME ["<路径1>", "<路径2>"...]')])]),this._v(" "),e("li",[e("code",[this._v("VOLUME <路径>")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),e("code",[this._v("Dockerfile")]),this._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("VOLUME /data\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里的 "),e("code",[this._v("/data")]),this._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),e("code",[this._v("/data")]),this._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("docker run -d -v mydata:/data xxxx\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这行命令中，就使用了 "),e("code",[this._v("mydata")]),this._v(" 这个命名卷挂载到了 "),e("code",[this._v("/data")]),this._v(" 这个位置，替代了 "),e("code",[this._v("Dockerfile")]),this._v(" 中定义的匿名卷的挂载配置。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"expose-暴露端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose-暴露端口","aria-hidden":"true"}},[this._v("#")]),this._v(" EXPOSE 暴露端口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("格式为 "),e("code",[this._v("EXPOSE <端口1> [<端口2>...]")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("EXPOSE")]),this._v(" 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),e("code",[this._v("docker run -P")]),this._v(" 时，会自动随机映射 "),e("code",[this._v("EXPOSE")]),this._v(" 的端口。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 "),s("code",[t._v("--icc=false")]),t._v("，当指定该参数后，容器间将默认无法互访，除非互相间使用了 "),s("code",[t._v("--links")]),t._v(" 参数的容器才可以互通，并且只有镜像中 "),s("code",[t._v("EXPOSE")]),t._v(" 所声明的端口才可以被访问。这个 "),s("code",[t._v("--icc=false")]),t._v(" 的用法，在引入了 "),s("code",[t._v("docker network")]),t._v(" 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("要将 "),s("code",[t._v("EXPOSE")]),t._v(" 和在运行时使用 "),s("code",[t._v("-p <宿主端口>:<容器端口>")]),t._v(" 区分开来。"),s("code",[t._v("-p")]),t._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),s("code",[t._v("EXPOSE")]),t._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"workdir-指定工作目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workdir-指定工作目录","aria-hidden":"true"}},[this._v("#")]),this._v(" WORKDIR 指定工作目录")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("格式为 "),e("code",[this._v("WORKDIR <工作目录路径>")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("WORKDIR")]),this._v(" 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，"),e("code",[this._v("WORKDIR")]),this._v(" 会帮你建立目录。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("之前提到一些初学者常犯的错误是把 "),e("code",[this._v("Dockerfile")]),this._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("RUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cd")]),t._v(" /app\nRUN "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" world.txt\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("如果将这个 "),s("code",[t._v("Dockerfile")]),t._v(" 进行构建镜像运行后，会发现找不到 "),s("code",[t._v("/app/world.txt")]),t._v(" 文件，或者其内容不是 "),s("code",[t._v("hello")]),t._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),s("code",[t._v("Dockerfile")]),t._v(" 中，这两行 "),s("code",[t._v("RUN")]),t._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),s("code",[t._v("Dockerfile")]),t._v(" 构建分层存储的概念不了解所导致的错误。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("之前说过每一个 "),e("code",[this._v("RUN")]),this._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),e("code",[this._v("RUN cd /app")]),this._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),e("code",[this._v("WORKDIR")]),this._v(" 指令。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"user-指定当前用户"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#user-指定当前用户","aria-hidden":"true"}},[this._v("#")]),this._v(" USER 指定当前用户")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("格式："),e("code",[this._v("USER <用户名>")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("USER")]),t._v(" 指令和 "),s("code",[t._v("WORKDIR")]),t._v(" 相似，都是改变环境状态并影响以后的层。"),s("code",[t._v("WORKDIR")]),t._v(" 是改变工作目录，"),s("code",[t._v("USER")]),t._v(" 则是改变之后层的执行 "),s("code",[t._v("RUN")]),t._v(", "),s("code",[t._v("CMD")]),t._v(" 以及 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 这类命令的身份。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当然，和 "),e("code",[this._v("WORKDIR")]),this._v(" 一样，"),e("code",[this._v("USER")]),this._v(" 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("RUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupadd")]),t._v(" -r redis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useradd")]),t._v(" -r -g redis redis\nUSER redis\nRUN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis-server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果以 "),e("code",[this._v("root")]),this._v(" 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 "),e("code",[this._v("su")]),this._v(" 或者 "),e("code",[this._v("sudo")]),this._v("，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立 redis 用户，并使用 gosu 换另一个用户执行命令")]),t._v("\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupadd")]),t._v(" -r redis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useradd")]),t._v(" -r -g redis redis\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载 gosu")]),t._v("\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O /usr/local/bin/gosu "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"')]),t._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/gosu \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" gosu nobody "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 CMD，并以另外的用户执行")]),t._v("\nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exec"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gosu"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis-server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"healthcheck-健康检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck-健康检查","aria-hidden":"true"}},[this._v("#")]),this._v(" HEALTHCHECK 健康检查")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("HEALTHCHECK [选项] CMD <命令>")]),this._v("：设置检查容器健康状况的命令")]),this._v(" "),e("li",[e("code",[this._v("HEALTHCHECK NONE")]),this._v("：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("HEALTHCHECK")]),this._v(" 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在没有 "),e("code",[this._v("HEALTHCHECK")]),this._v(" 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("而自 1.12 之后，Docker 提供了 "),e("code",[this._v("HEALTHCHECK")]),this._v(" 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("当在一个镜像指定了 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令后，用其启动容器，初始状态会为 "),s("code",[t._v("starting")]),t._v("，在 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令检查成功后变为 "),s("code",[t._v("healthy")]),t._v("，如果连续一定次数失败，则会变为 "),s("code",[t._v("unhealthy")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("HEALTHCHECK")]),this._v(" 支持下列选项：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("--interval=<间隔>")]),t._v("：两次健康检查的间隔，默认为 30 秒；")]),t._v(" "),s("li",[s("code",[t._v("--timeout=<时长>")]),t._v("：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；")]),t._v(" "),s("li",[s("code",[t._v("--retries=<次数>")]),t._v("：当连续失败指定次数后，则将容器状态视为 "),s("code",[t._v("unhealthy")]),t._v("，默认 3 次。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("和 "),e("code",[this._v("CMD")]),this._v(", "),e("code",[this._v("ENTRYPOINT")]),this._v(" 一样，"),e("code",[this._v("HEALTHCHECK")]),this._v(" 只可以出现一次，如果写了多个，只有最后一个生效。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在 "),s("code",[t._v("HEALTHCHECK [选项] CMD")]),t._v(" 后面的命令，格式和 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 一样，分为 "),s("code",[t._v("shell")]),t._v(" 格式，和 "),s("code",[t._v("exec")]),t._v(" 格式。命令的返回值决定了该次健康检查的成功与否："),s("code",[t._v("0")]),t._v("：成功；"),s("code",[t._v("1")]),t._v("：失败；"),s("code",[t._v("2")]),t._v("：保留，不要使用这个值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 "),e("code",[this._v("curl")]),this._v(" 来帮助判断，其 "),e("code",[this._v("Dockerfile")]),this._v(" 的 "),e("code",[this._v("HEALTHCHECK")]),this._v(" 可以这么写：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("FROM nginx\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/apt/lists/*\nHEALTHCHECK --interval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("5s --timeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("3s \\\n  CMD "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fs http://localhost/ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exit")]),t._v(" 1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 "),e("code",[this._v("curl -fs http://localhost/ || exit 1")]),this._v(" 作为健康检查命令。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("docker build")]),this._v(" 来构建这个镜像：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ docker build -t myweb:v1 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[this._v(".")]),this._v("\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ docker run -d --name web -p 80:80 myweb:v1\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当运行该镜像后，可以通过 "),e("code",[this._v("docker container ls")]),this._v(" 看到最初的状态为 "),e("code",[this._v("(health: starting)")]),this._v("：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx -g \'daemon off"')]),t._v("   3 seconds ago       Up 2 seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("health: starting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   80/tcp, 443/tcp     web\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在等待几秒钟后，再次 "),e("code",[this._v("docker container ls")]),this._v("，就会看到健康状态变化为了 "),e("code",[this._v("(healthy)")]),this._v("：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx -g \'daemon off"')]),t._v("   18 seconds ago      Up 16 seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("healthy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   80/tcp, 443/tcp     web\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果健康检查连续失败超过了重试次数，状态就会变为 "),e("code",[this._v("(unhealthy)")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了帮助排障，健康检查命令的输出（包括 "),e("code",[this._v("stdout")]),this._v(" 以及 "),e("code",[this._v("stderr")]),this._v("）都会被存储于健康状态里，可以用 "),e("code",[this._v("docker inspect")]),this._v(" 来查看。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker inspect --format "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{{json .State.Health}}'")]),t._v(" web "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" python -m json.tool\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FailingStreak"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" 0,\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Log"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"End"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-11-25T14:35:37.940957051Z"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ExitCode"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" 0,\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Output"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<!DOCTYPE html>\\n<html>\\n<head>\\n<title>Welcome to nginx!</title>\\n<style>\\n    body {\\n        width: 35em;\\n        margin: 0 auto;\\n        font-family: Tahoma, Verdana, Arial, sans-serif;\\n    }\\n</style>\\n</head>\\n<body>\\n<h1>Welcome to nginx!</h1>\\n<p>If you see this page, the nginx web server is successfully installed and\\nworking. Further configuration is required.</p>\\n\\n<p>For online documentation and support please refer to\\n<a href=\\"http://nginx.org/\\">nginx.org</a>.<br/>\\nCommercial support is available at\\n<a href=\\"http://nginx.com/\\">nginx.com</a>.</p>\\n\\n<p><em>Thank you for using nginx.</em></p>\\n</body>\\n</html>\\n"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Start"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-11-25T14:35:37.780192565Z"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Status"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"healthy"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考文档")])}],!1,null,null,null);e.default=a.exports}}]);